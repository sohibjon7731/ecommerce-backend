basePath: /api/v1
definitions:
  dto.Error:
    properties:
      message:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.ProductDTO:
    properties:
      description:
        type: string
      image:
        type: string
      price:
        type: number
      title:
        type: string
    required:
    - description
    - image
    - price
    - title
    type: object
  dto.RegisterDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.Success:
    properties:
      result:
        example: success
        type: string
    type: object
  dto.SuccessResponse:
    properties:
      success:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for Swagger integration.
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows a new user to login with an email, password.
      parameters:
      - description: Login User
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Error'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: integer
            type: object
      summary: Login user
      tags:
      - Accounts
  /auth/register:
    post:
      consumes:
      - application/json
      description: This endpoint allows a new user to register with an email, password,
        and password confirmation.
      parameters:
      - description: Register User
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Error'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: integer
            type: object
      summary: Register a new user
      tags:
      - Accounts
  /products/all:
    get:
      consumes:
      - application/json
      description: Get All Products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get All products
      tags:
      - Products
  /products/create:
    post:
      consumes:
      - application/json
      description: Adds a new product to the system
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new product
      tags:
      - Products
  /products/update/{id}:
    delete:
      consumes:
      - application/json
      description: delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: delete a product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: update a product
      tags:
      - Products
swagger: "2.0"
